/*
* MORFEO Project
* http://www.morfeo-project.org
*
* Component: TIDNotifJ
* Programming Language: Java
*
* File: $Source$
* Version: $Revision: 6 $
* Date: $Date: 2008-01-03 11:49:56 +0100 (Thu, 03 Jan 2008) $
* Last modified by: $Author: avega $
*
* (C) Copyright 2005 Telefónica Investigación y Desarrollo
*     S.A.Unipersonal (Telefónica I+D)
*
* Info about members and contributors of the MORFEO project
* is available at:
*
*   http://www.morfeo-project.org/TIDNotifJ/CREDITS
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*
* If you want to use this software an plan to distribute a
* proprietary application in any way, and you are not licensing and
* distributing your source code under GPL, you probably need to
* purchase a commercial license of the product.  More info about
* licensing options is available at:
*
*   http://www.morfeo-project.org/TIDNotifJ/Licensing
*/ 

/* Generated By:JJTree&JavaCC: Do not edit this line. ConstraintParser.java */
package es.tid.util.parser;
public class ConstraintParser/*@bgen(jjtree)*/implements ConstraintParserTreeConstants, ConstraintParserConstants {/*@bgen(jjtree)*/
  protected static JJTConstraintParserState jjtree = new JJTConstraintParserState();static private final String Title = "ConstraintGrammar Parser Version 1.0";
  static private ConstraintParser theParser = null;
  static java.io.BufferedReader dis = null;
  static private java.io.StringReader in = null;
  static private String theString = "( TRUE )";
  static private int nuevo = 0;
  static String constraint;

  public static void main(String args[])
  {
    ConstraintParser parser;
    in = new java.io.StringReader(theString);

    if (args.length == 0)
    {
      System.out.print(Title);
      System.out.println(":  Reading from standard input . . .");
      parser = new ConstraintParser(in);
      nuevo = 1;
    }
    else if (args.length == 1)
    {
      System.out.print(Title);
      System.out.println(": Reading from file " + args[0] + " . . .");
      try
      {
        parser = new ConstraintParser(new java.io.FileInputStream(args[0]));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.print(Title);
        System.out.println(": File " + args[0] + " not found.");
        return;
      }
    }
    else
    {
      System.out.println(Title);
      System.out.println("Usage :");
      System.out.println("         java ConstraintParser < inputfile");
      System.out.println("OR");
      System.out.println("         java ConstraintParser inputfile");
      return;
    }

    if (nuevo != 0)
    {
      dis=new java.io.BufferedReader(new java.io.InputStreamReader(System.in));
    }

    while (true)
    {
      System.out.println("\nNew Expression: ");
      System.out.println("--------------: ");
      try
      {
        SimpleNode n;
        if (nuevo != 0)
        {
          constraint = dis.readLine();
          in = new java.io.StringReader(constraint);
          ConstraintParser.ReInit(in);
          n = ConstraintParser.Constraint();
        }
        else
        {
          n = ConstraintParser.Constraint();
        }

        if (n == null)
        {
          System.out.println("<FIN>\n");
          System.exit(0);
        }

        n.dump("");

        System.out.println("\n*** <OK> ***\n");
      }
      catch (Exception e)
      {
        System.out.println("### <ERROR> ###");
        System.out.println(e.getMessage());
        e.printStackTrace();
        System.exit(0);
      }
    }
  }

/********************************************************************
 * EXTENDED CONSTRAINT GRAMMAR Start Here
 ********************************************************************/

// Precedence Order
//
// or                 : BoolOr
// and                : BoolAnd
// == != <> < > <= >= : BoolCompare
//                      (== | != | <> | < | > | <= | >=)
// in                 :  
// ~                  :
// + -                :
//                      (+ | -) 
// * /                : 
//                      (* | /) 
// not                :
// ( )                :
// .                  :

/********************************************************************
 * Precedende Order
 ********************************************************************/
/*
%token TK_IN
%token TK_ADD TK_MINUS
%token TK_MUL TK_DIV
%token TK_NOT
%token TK_TC_KIND TK_TC_ID TK_TC_NAME
%token TK_SUBSTRING TK_BEGINSTRING TK_LENGTH TK_DISCRIMINATOR
%token TK_OPENPAR TK_CLOSEPAR TK_OPENBRACKET TK_CLOSEBRACKET
%token <boolval> TK_TRUE
%token <boolval> TK_FALSE
%token <idval> TK_IDENT
%token <strval> TK_STRING
%token <dval> TK_NUMBER
%token <inval> TK_INDEX
%token TK_VALUE
%token TK_POINT TK_COLON TK_COMMA
*/
  static final public SimpleNode Constraint() throws ParseException {
                           /*@bgen(jjtree) Constraint */
  TIDConstraint jjtn000 = new TIDConstraint(JJTCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case EOL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          jj_consume_token(EOL);
          break;
        case 0:
          jj_consume_token(0);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return null;}
        break;
      case TK_OPENPAR:
      case TK_COLON:
      case TK_ADD:
      case TK_MINUS:
      case TK_VALUE:
      case TK_NOT:
      case TK_TRUE:
      case TK_FALSE:
      case TK_EXIST:
      case TK_INSTR:
      case TK_MODULO:
      case TK_DATECMP:
      case TK_DATECMP2:
      case TK_DEFAULT:
      case TK_SUBSTRING:
      case TK_BEGINSTRING:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        Bool();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          jj_consume_token(EOL);
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//<preference>:=/* <empty> */
//   | min <bool>
//   | max <bool>
//   | with <bool>
//   | random
//   | first
  static final public void Bool() throws ParseException {
    BoolOr();
  }

  static final public void BoolOr() throws ParseException {
    TIDBinaryExpr jjtn001 = new TIDBinaryExpr(JJTBINARYEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      BoolAnd();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_OR:
        jj_consume_token(TK_OR);
        BoolOr();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtc001 = false;
      jjtn001.setOp(TIDBinaryExpr.OR_OP);
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  static final public void BoolAnd() throws ParseException {
    TIDBinaryExpr jjtn001 = new TIDBinaryExpr(JJTBINARYEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      BoolCompare();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_AND:
        jj_consume_token(TK_AND);
        BoolAnd();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtc001 = false;
      jjtn001.setOp(TIDBinaryExpr.AND_OP);
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  static final public void BoolCompare() throws ParseException {
    TIDRelationalExpr jjtn001 = new TIDRelationalExpr(JJTRELATIONALEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      ExprFunc();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_LESS:
      case TK_GREAT:
      case TK_EQ:
      case TK_DIF:
      case TK_DIF2:
      case TK_LESSEQ:
      case TK_GREATEQ:
      case TK_LIKE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TK_EQ:
          jj_consume_token(TK_EQ);
          jjtn001.setOp(TIDRelationalExpr.EQ_OP);
          break;
        case TK_DIF:
          jj_consume_token(TK_DIF);
          jjtn001.setOp(TIDRelationalExpr.DIFF_OP);
          break;
        case TK_DIF2:
          jj_consume_token(TK_DIF2);
          jjtn001.setOp(TIDRelationalExpr.DIFF2_OP);
          break;
        case TK_LESS:
          jj_consume_token(TK_LESS);
          jjtn001.setOp(TIDRelationalExpr.LESS_OP);
          break;
        case TK_LESSEQ:
          jj_consume_token(TK_LESSEQ);
          jjtn001.setOp(TIDRelationalExpr.LESSEQ_OP);
          break;
        case TK_GREAT:
          jj_consume_token(TK_GREAT);
          jjtn001.setOp(TIDRelationalExpr.GREAT_OP);
          break;
        case TK_GREATEQ:
          jj_consume_token(TK_GREATEQ);
          jjtn001.setOp(TIDRelationalExpr.GREATEQ_OP);
          break;
        case TK_LIKE:
          jj_consume_token(TK_LIKE);
          jjtn001.setOp(TIDRelationalExpr.LIKE_OP);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ExprFunc();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  static final public void ExprFunc() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_SUBSTRING:
    TIDBinaryExpr jjtn001 = new TIDBinaryExpr(JJTBINARYEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TK_SUBSTRING);
        jj_consume_token(TK_OPENPAR);
        Expr();
        jj_consume_token(TK_COMMA);
        Expr();
        jj_consume_token(TK_CLOSEPAR);
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtc001 = false;
      jjtn001.setOp(TIDBinaryExpr.SUBSTRING_OP);
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
      }
      break;
    case TK_BEGINSTRING:
    TIDBinaryExpr jjtn002 = new TIDBinaryExpr(JJTBINARYEXPR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(TK_BEGINSTRING);
        jj_consume_token(TK_OPENPAR);
        Expr();
        jj_consume_token(TK_COMMA);
        Expr();
        jj_consume_token(TK_CLOSEPAR);
      jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
      jjtc002 = false;
      jjtn002.setOp(TIDBinaryExpr.BEGINSTRING_OP);
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
    }
      }
      break;
    case TK_INSTR:
    TIDBinaryExpr jjtn003 = new TIDBinaryExpr(JJTBINARYEXPR);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(TK_INSTR);
        jj_consume_token(TK_OPENPAR);
        Expr();
        jj_consume_token(TK_COMMA);
        Expr();
        jj_consume_token(TK_CLOSEPAR);
      jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
      jjtc003 = false;
      jjtn003.setOp(TIDBinaryExpr.INSTR_OP);
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
    }
      }
      break;
    case TK_DATECMP:
    TIDFunctionExpr jjtn004 = new TIDFunctionExpr(JJTFUNCTIONEXPR);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(TK_DATECMP);
        jj_consume_token(TK_OPENPAR);
        Expr();
        jj_consume_token(TK_COMMA);
        Expr();
        jj_consume_token(TK_COMMA);
        Expr();
        jj_consume_token(TK_CLOSEPAR);
      jjtree.closeNodeScope(jjtn004, jjtree.nodeArity() > 1);
      jjtc004 = false;
      jjtn004.setOp(TIDFunctionExpr.DATECMP_OP);
      } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte004;}
    }
    if (jjte004 instanceof ParseException) {
      {if (true) throw (ParseException)jjte004;}
    }
    {if (true) throw (Error)jjte004;}
      } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, jjtree.nodeArity() > 1);
    }
      }
      break;
    case TK_DATECMP2:
    TIDFunctionExpr jjtn005 = new TIDFunctionExpr(JJTFUNCTIONEXPR);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(TK_DATECMP2);
        jj_consume_token(TK_OPENPAR);
        Expr();
        jj_consume_token(TK_COMMA);
        Expr();
        jj_consume_token(TK_COMMA);
        Expr();
        jj_consume_token(TK_CLOSEPAR);
      jjtree.closeNodeScope(jjtn005, jjtree.nodeArity() > 1);
      jjtc005 = false;
      jjtn005.setOp(TIDFunctionExpr.DATECMP2_OP);
      } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte005;}
    }
    if (jjte005 instanceof ParseException) {
      {if (true) throw (ParseException)jjte005;}
    }
    {if (true) throw (Error)jjte005;}
      } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, jjtree.nodeArity() > 1);
    }
      }
      break;
    case TK_MODULO:
      jj_consume_token(TK_MODULO);
      jj_consume_token(TK_OPENPAR);
      Integer(0);
      jj_consume_token(TK_COMMA);
      Integer(0);
      jj_consume_token(TK_CLOSEPAR);
      break;
    case TK_OPENPAR:
    case TK_COLON:
    case TK_ADD:
    case TK_MINUS:
    case TK_VALUE:
    case TK_NOT:
    case TK_TRUE:
    case TK_FALSE:
    case TK_EXIST:
    case TK_DEFAULT:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      ExprIn();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExprIn() throws ParseException {
    TIDInOperator jjtn001 = new TIDInOperator(JJTINOPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      ExprTwiddle();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_IN:
        if (jj_2_1(2)) {
          jj_consume_token(TK_IN);
          jj_consume_token(TK_VALUE);
          Component();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TK_IN:
            jj_consume_token(TK_IN);
            jj_consume_token(TK_OPENPAR);
            LiteralArray();
            jj_consume_token(TK_CLOSEPAR);
            break;
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  static final public void ExprTwiddle() throws ParseException {
    TIDBinaryExpr jjtn001 = new TIDBinaryExpr(JJTBINARYEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      Expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TILDE:
        jj_consume_token(TK_TILDE);
        Expr();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtc001 = false;
      jjtn001.setOp(TIDBinaryExpr.TWIDDLE_OP);
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  static final public void Expr() throws ParseException {
    TIDArithmeticExpr jjtn001 = new TIDArithmeticExpr(JJTARITHMETICEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      Term();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_ADD:
      case TK_MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TK_ADD:
          jj_consume_token(TK_ADD);
                   jjtn001.setOp(TIDArithmeticExpr.ADD_OP);
          break;
        case TK_MINUS:
          jj_consume_token(TK_MINUS);
                     jjtn001.setOp(TIDArithmeticExpr.MINUS_OP);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Expr();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  static final public void Term() throws ParseException {
    TIDArithmeticExpr jjtn001 = new TIDArithmeticExpr(JJTARITHMETICEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      FactorNot();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_MUL:
      case TK_DIV:
      case TK_MOD:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TK_MUL:
          jj_consume_token(TK_MUL);
                   jjtn001.setOp(TIDArithmeticExpr.MUL_OP);
          break;
        case TK_DIV:
          jj_consume_token(TK_DIV);
                   jjtn001.setOp(TIDArithmeticExpr.DIV_OP);
          break;
        case TK_MOD:
          jj_consume_token(TK_MOD);
                   jjtn001.setOp(TIDArithmeticExpr.MOD_OP);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Term();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  static final public void FactorNot() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_OPENPAR:
    case TK_COLON:
    case TK_ADD:
    case TK_MINUS:
    case TK_VALUE:
    case TK_TRUE:
    case TK_FALSE:
    case TK_EXIST:
    case TK_DEFAULT:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      Factor();
      break;
    case TK_NOT:
    TIDUnaryExpr jjtn001 = new TIDUnaryExpr(JJTUNARYEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TK_NOT);
        Factor();
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.setOp(TIDUnaryExpr.NOT_OP);
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Factor() throws ParseException {
  boolean a = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_OPENPAR:
      jj_consume_token(TK_OPENPAR);
      Bool();
      jj_consume_token(TK_CLOSEPAR);
      break;
    case TK_VALUE:
    TIDBasicAnyValue jjtn001 = new TIDBasicAnyValue(JJTBASICANYVALUE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TK_VALUE);
        a = Component();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  a);
    }
      }
      break;
    case TK_COLON:
      jj_consume_token(TK_COLON);
      Keyword();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_COLON:
        jj_consume_token(TK_COLON);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    case TK_EXIST:
    TIDUnaryExpr jjtn002 = new TIDUnaryExpr(JJTUNARYEXPR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(TK_EXIST);
        jj_consume_token(TK_VALUE);
        Component();
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      jjtn002.setOp(TIDUnaryExpr.EXIST_OP);
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    case TK_DEFAULT:
    TIDDefault jjtn003 = new TIDDefault(JJTDEFAULT);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(TK_DEFAULT);
        jj_consume_token(TK_VALUE);
        Component();
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
      break;
    case IDENTIFIER:
      Identifier();
      break;
    case TK_ADD:
    case TK_MINUS:
    case TK_TRUE:
    case TK_FALSE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Literal();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public boolean Component() throws ParseException {
  Token t;
  boolean b = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_OPENPAR:
    case TK_OPENSBRACKET:
    case TK_DOT:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_DOT:
        jj_consume_token(TK_DOT);
        CompDot();
                         b = false;
        break;
      case TK_OPENSBRACKET:
        CompArray();
                  b = false;
        break;
      case TK_OPENPAR:
        CompAssoc();
                  b = false;
        break;
      case IDENTIFIER:
        RuntimeVariable();
                        b = false;
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public void CompExt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_OPENPAR:
    case TK_OPENSBRACKET:
    case TK_DOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_DOT:
        jj_consume_token(TK_DOT);
        CompDot();
        break;
      case TK_OPENSBRACKET:
        CompArray();
        break;
      case TK_OPENPAR:
        CompAssoc();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static final public void CompDot() throws ParseException {
  Token t;
  Token r=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      TIDStructAnyValue jjtn001 = new TIDStructAnyValue(JJTSTRUCTANYVALUE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        t = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TK_COLON:
          jj_consume_token(TK_COLON);
          r = jj_consume_token(TYPECODE);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        CompExt();
        jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
        jjtn001.setMember(t.image);
        if (r != null)
        {
          jjtn001.setRepositoryId(r.image);
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      break;
    case INTEGER_LITERAL:
      CompPos();
      break;
    case TK_OPENPAR:
      UnionPos();
      break;
    case TK__LENGTH:
      TIDSequenceAnyValue jjtn002 = new TIDSequenceAnyValue(JJTSEQUENCEANYVALUE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(TK__LENGTH);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
      break;
    case TK__D:
      t = jj_consume_token(TK__D);
                TIDStructAnyValue jjtn003 = new TIDStructAnyValue(JJTSTRUCTANYVALUE);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
      try {
                jjtree.closeNodeScope(jjtn003, true);
                jjtc003 = false;
                jjtn003.setMember(t.image);
      } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003, true);
                }
      }
      break;
    case TK__TYPE_ID:
      t = jj_consume_token(TK__TYPE_ID);
                      TIDStructAnyValue jjtn004 = new TIDStructAnyValue(JJTSTRUCTANYVALUE);
                      boolean jjtc004 = true;
                      jjtree.openNodeScope(jjtn004);
      try {
                      jjtree.closeNodeScope(jjtn004, true);
                      jjtc004 = false;
                      jjtn004.setMember(t.image);
      } finally {
                      if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, true);
                      }
      }
      break;
    case TK__REPOS_ID:
      t = jj_consume_token(TK__REPOS_ID);
                       TIDStructAnyValue jjtn005 = new TIDStructAnyValue(JJTSTRUCTANYVALUE);
                       boolean jjtc005 = true;
                       jjtree.openNodeScope(jjtn005);
      try {
                       jjtree.closeNodeScope(jjtn005, true);
                       jjtc005 = false;
                       jjtn005.setMember(t.image);
      } finally {
                       if (jjtc005) {
                         jjtree.closeNodeScope(jjtn005, true);
                       }
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CompArray() throws ParseException {
  Token t;
    TIDSequenceAnyValue jjtn001 = new TIDSequenceAnyValue(JJTSEQUENCEANYVALUE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(TK_OPENSBRACKET);
      t = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(TK_CLOSESBRACKET);
      CompExt();
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.setMember(Integer.parseInt(t.image));
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  static final public void CompAssoc() throws ParseException {
  Token t;
    TIDAssocAnyValue jjtn001 = new TIDAssocAnyValue(JJTASSOCANYVALUE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(TK_OPENPAR);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(TK_CLOSEPAR);
      CompExt();
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.setMemberValue(t.image);
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  static final public void CompPos() throws ParseException {
  Token t;
    TIDStructAnyValue jjtn001 = new TIDStructAnyValue(JJTSTRUCTANYVALUE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(INTEGER_LITERAL);
      CompExt();
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.setMember(Integer.parseInt(t.image));
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  static final public void UnionPos() throws ParseException {
    jj_consume_token(TK_OPENPAR);
    UnionVal();
    jj_consume_token(TK_CLOSEPAR);
    CompExt();
  }

  static final public void UnionVal() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    TIDAssocAnyValue jjtn001 = new TIDAssocAnyValue(JJTASSOCANYVALUE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        t = jj_consume_token(STRING_LITERAL);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.setMemberValue(t.image);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case TK_ADD:
    case TK_MINUS:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    TIDUnionAnyValue jjtn002 = new TIDUnionAnyValue(JJTUNIONANYVALUE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      jjtn002.setMember(t.image);
          break;
        case INTEGER_LITERAL:
          t = jj_consume_token(INTEGER_LITERAL);
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      jjtn002.setMember(Integer.parseInt(t.image));
          break;
        case TK_MINUS:
          jj_consume_token(TK_MINUS);
          t = jj_consume_token(INTEGER_LITERAL);
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      jjtn002.setMember((-1)*(Integer.parseInt(t.image)));
          break;
        case TK_ADD:
          jj_consume_token(TK_ADD);
          t = jj_consume_token(INTEGER_LITERAL);
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      jjtn002.setMember(Integer.parseInt(t.image));
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void LiteralArray() throws ParseException {
    StringArray();
  }

  static final public void StringArray() throws ParseException {
 /*@bgen(jjtree) StringArray */
  TIDStringArray jjtn000 = new TIDStringArray(JJTSTRINGARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                         jjtn000.setName(t.image);
        break;
      case CHARACTER_LITERAL:
        t = jj_consume_token(CHARACTER_LITERAL);
                            jjtn000.setName(t.image);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TK_COMMA:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_1;
        }
        jj_consume_token(TK_COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
          t = jj_consume_token(STRING_LITERAL);
                           jjtn000.setName(t.image);
          break;
        case CHARACTER_LITERAL:
          t = jj_consume_token(CHARACTER_LITERAL);
                              jjtn000.setName(t.image);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      String();
      break;
    case TK_ADD:
    case TK_MINUS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
      NumberLiteral();
      break;
    case TK_TRUE:
    case TK_FALSE:
      BooleanLiteral();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void String() throws ParseException {
 /*@bgen(jjtree) String */
  TIDString jjtn000 = new TIDString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.setName(t.image);
        break;
      case CHARACTER_LITERAL:
        t = jj_consume_token(CHARACTER_LITERAL);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.setName(t.image);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void NumberLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_MINUS:
      jj_consume_token(TK_MINUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        Integer(1);
        break;
      case FLOATING_POINT_LITERAL:
        Float(1);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case TK_ADD:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_ADD:
        jj_consume_token(TK_ADD);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        Integer(0);
        break;
      case FLOATING_POINT_LITERAL:
        Float(0);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Integer(int s) throws ParseException {
 /*@bgen(jjtree) Integer */
  TIDInteger jjtn000 = new TIDInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (s == 0)
      jjtn000.setVal(Integer.parseInt(t.image));
    else
      jjtn000.setVal((-1)*(Integer.parseInt(t.image)));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Float(int s) throws ParseException {
 /*@bgen(jjtree) Float */
  TIDFloat jjtn000 = new TIDFloat(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOATING_POINT_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (s == 0)
      jjtn000.setVal(Float.parseFloat(t.image));
    else
      jjtn000.setVal((-1)*(Float.parseFloat(t.image)));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//void MyId() # void :
//{
  //Token t;
//}
//{
  //t=<IDENTIFIER>
  //{
    //jjtThis.setMember(t.image);
  //}
  //#StructAnyValue
//}

//void AssocId() :
//{
//  Token t;
//}
//{
//  t=<IDENTIFIER> <TK_CLOSEPAR> //CompExt()
//  {
//    jjtThis.setName(t.image);
//  }
//}

//void LiteralId() :
//{
//  Token t;
//}
//{
//  t=<INTEGER_LITERAL> <TK_CLOSEPAR> //CompExt()
//  {
//    jjtThis.setVal(Integer.parseInt(t.image));
//  }
//}
  static final public void RuntimeVariable() throws ParseException {
 /*@bgen(jjtree) RuntimeVariable */
  TIDRuntimeVariable jjtn000 = new TIDRuntimeVariable(JJTRUNTIMEVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      CompExt();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Keyword() throws ParseException {
 /*@bgen(jjtree) Keyword */
  TIDKeyword jjtn000 = new TIDKeyword(JJTKEYWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setName(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
  TIDIdentifier jjtn000 = new TIDIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setName(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BooleanLiteral() throws ParseException {
  Token t;
    TIDBoolean jjtn001 = new TIDBoolean(JJTBOOLEAN);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TRUE:
        t = jj_consume_token(TK_TRUE);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.setName(t.image);
        break;
      case TK_FALSE:
        t = jj_consume_token(TK_FALSE);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.setName(t.image);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  static final private boolean jj_3_1() {
    if (jj_scan_token(TK_IN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TK_VALUE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public ConstraintParserTokenManager token_source;
  static ASCII_CharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[36];
  static final private int[] jj_la1_0 = {0x1,0x0,0x80019081,0x0,0x0,0x1fe00000,0x1fe00000,0x80019080,0x0,0x0,0x100000,0x18000,0x18000,0xe0000,0xe0000,0x80019080,0x1000,0x80019080,0x4280,0x4280,0x4280,0x4280,0x1000,0x80,0x18000,0x18000,0x0,0x2000,0x0,0x18000,0x0,0x0,0x8000,0x0,0x18000,0x0,};
  static final private int[] jj_la1_1 = {0x0,0x0,0x7b272ac0,0x8,0x20,0x0,0x0,0x7b272ac0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x78200ac0,0x0,0x78200a80,0x0,0x0,0x0,0x0,0x0,0x8c08010,0x8000000,0x48000000,0x60000000,0x0,0x60000000,0x78000280,0x60000000,0x18000000,0x0,0x18000000,0x18000000,0x280,};
  static final private int[] jj_la1_2 = {0x10000,0x10000,0x11000,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x1000,0x1000,0x1000,0x0,0x0,0x0,0x1000,0x1000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public ConstraintParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new ConstraintParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    ASCII_CharStream.ReInit(stream, 1, 1);
    ConstraintParserTokenManager.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ConstraintParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new ConstraintParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    ASCII_CharStream.ReInit(stream, 1, 1);
    ConstraintParserTokenManager.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ConstraintParser(ConstraintParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ConstraintParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = ConstraintParserTokenManager.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = ConstraintParserTokenManager.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = ConstraintParserTokenManager.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = ConstraintParserTokenManager.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=ConstraintParserTokenManager.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration myenum = jj_expentries.elements(); myenum.hasMoreElements();) {
        int[] oldentry = (int[])(myenum.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[83];
    for (int i = 0; i < 83; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
