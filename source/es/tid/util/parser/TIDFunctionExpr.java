/*
* MORFEO Project
* http://www.morfeo-project.org
*
* Component: TIDNotifJ
* Programming Language: Java
*
* File: $Source$
* Version: $Revision: 3 $
* Date: $Date: 2006-01-17 17:42:13 +0100 (Tue, 17 Jan 2006) $
* Last modified by: $Author: aarranz $
*
* (C) Copyright 2005 Telefónica Investigación y Desarrollo
*     S.A.Unipersonal (Telefónica I+D)
*
* Info about members and contributors of the MORFEO project
* is available at:
*
*   http://www.morfeo-project.org/TIDNotifJ/CREDITS
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*
* If you want to use this software an plan to distribute a
* proprietary application in any way, and you are not licensing and
* distributing your source code under GPL, you probably need to
* purchase a commercial license of the product.  More info about
* licensing options is available at:
*
*   http://www.morfeo-project.org/TIDNotifJ/Licensing
*/ 

/* Generated By:JJTree: Do not edit this line. TIDFunctionExpr.java */

package es.tid.util.parser;

import es.tid.util.parser.Operations.TIDFunctions;

public class TIDFunctionExpr extends SimpleNode implements TIDFunctions, TIDConstraintMsg
{
  private static final String NODENAME = "FunctionExpr: ";

  private String name;
  private int operator;

  public TIDFunctionExpr(int id) {
    super(id);
    super.node_type = NodeType.TIDFunctionExpr;
  }

  public TIDFunctionExpr(ConstraintParser p, int id) {
    super(p, id);
    super.node_type = NodeType.TIDFunctionExpr;
  }

  public void setOp(int n) 
  {
    try
    {
      operator = n;
      name = STR_OP[n-FIRST_OP];
    }
    catch (Exception e)
    {
      operator = UNKNOWN_OP;
      name = STR_OP[UNKNOWN_OP-FIRST_OP];
    }
  }

  public int getOp()
  {
    return this.operator;
  }

  public String toString() {
    return NODENAME + name;
  }

  public TypeValuePair evaluate( org.omg.DynamicAny.DynAny dynany )
  {

    if (children != null) 
    {
      TypeValuePair result = null;

      switch (operator)
      {
        case DATECMP_OP:
          {
          int j = 0;

          TypeValuePair operand[] = new TypeValuePair[3];

          for (int i = 0; i < children.length; ++i)
          {
            SimpleNode n = (SimpleNode)children[i];

            if (n != null)
            {
              operand[j++] = n.evaluate( dynany );
            }
          }

          if (j == 3) // Todo OK
          {
            if ( (operand[0].type != TypeValuePair.STRTYPE) ||
                 (operand[1].type != TypeValuePair.STRTYPE) ||
                 (operand[2].type != TypeValuePair.STRTYPE) )
            {
              operand[0] = null;
              operand[1] = null;
              operand[2] = null;
              return new TypeValuePair();
            }

            java.text.SimpleDateFormat _date_format = null;
            try
            {
              _date_format = 
                 new java.text.SimpleDateFormat((String)operand[2].val.objVal);
            }
            catch (Exception ex)
            {
              TIDParser.print(TIDParser.ERROR, DATE_FORMAT_ERROR);
              return new TypeValuePair();
            }

            int date_a = 0;
            try
            {
              java.util.Date date = 
                             _date_format.parse((String)operand[0].val.objVal);
              date_a = (int)(date.getTime()/(long)1000);
            }
            catch (Exception ex)
            {
              TIDParser.print(TIDParser.ERROR, PARSE_DATE_A_ERROR);
              return new TypeValuePair();
            }

            int date_b = 0;
            try
            {
              java.util.Date date = 
                             _date_format.parse((String)operand[1].val.objVal);
              date_b = (int)(date.getTime()/(long)1000);
            }
            catch (Exception ex)
            {
              TIDParser.print(TIDParser.ERROR, PARSE_DATE_B_ERROR);
              return new TypeValuePair();
            }

            if (date_a < date_b)
            {
              result = new TypeValuePair(-1);
            }
            else if (date_a > date_b)
            {
              result = new TypeValuePair(1);
            }
            else
            {
              result = new TypeValuePair(0);
            }

            operand[0] = null;
            operand[1] = null;
            operand[2] = null;
            return result;
          }
          else // Num. hijos incorrecto
          {
            operand[0] = null;
            operand[1] = null;
            operand[2] = null;
            TIDParser.print(TIDParser.ERROR, TFE_NUM_OPERANDS);
          }
          }
          break;
        case DATECMP2_OP:
          {
          int j = 0;

          TypeValuePair operand[] = new TypeValuePair[3];

          for (int i = 0; i < children.length; ++i)
          {
            SimpleNode n = (SimpleNode)children[i];

            if (n != null)
            {
              operand[j++] = n.evaluate( dynany );
            }
          }

          if (j == 3) // Todo OK
          {
            if ( (operand[0].type != TypeValuePair.FTYPE) ||
                 (operand[1].type != TypeValuePair.STRTYPE) ||
                 (operand[2].type != TypeValuePair.STRTYPE) )
            {
              operand[0] = null;
              operand[1] = null;
              operand[2] = null;
              return new TypeValuePair();
            }

            java.text.SimpleDateFormat _date_format = null;
            try
            {
              _date_format = 
                 new java.text.SimpleDateFormat((String)operand[2].val.objVal);
            }
            catch (Exception ex)
            {
              TIDParser.print(TIDParser.ERROR, DATE_FORMAT_ERROR);
              return new TypeValuePair();
            }

            int date_a = 0;
            try
            {
              java.util.Date date = _date_format.parse(_date_format.format(
               new java.util.Date(((Float)operand[0].val.objVal).longValue())));
              date_a = (int)(date.getTime()/(long)1000);
            }
            catch (Exception ex)
            {
              TIDParser.print(TIDParser.ERROR, PARSE_DATE_A_ERROR);
              return new TypeValuePair();
            }

            int date_b = 0;
            try
            {
              java.util.Date date = 
                             _date_format.parse((String)operand[1].val.objVal);
              date_b = (int)(date.getTime()/(long)1000);
            }
            catch (Exception ex)
            {
              TIDParser.print(TIDParser.ERROR, PARSE_DATE_B_ERROR);
              return new TypeValuePair();
            }

            if (date_a < date_b)
            {
              result = new TypeValuePair(-1);
            }
            else if (date_a > date_b)
            {
              result = new TypeValuePair(1);
            }
            else
            {
              result = new TypeValuePair(0);
            }

            operand[0] = null;
            operand[1] = null;
            operand[2] = null;
            return result;
          }
          else // Num. hijos incorrecto
          {
            operand[0] = null;
            operand[1] = null;
            operand[2] = null;
            TIDParser.print(TIDParser.ERROR, TFE_NUM_OPERANDS);
          }
          }
          break;
      }
    }
    return new TypeValuePair();
  }
}
