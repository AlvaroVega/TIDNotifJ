/*
* MORFEO Project
* http://www.morfeo-project.org
*
* Component: TIDNotifJ
* Programming Language: Java
*
* File: $Source$
* Version: $Revision: 3 $
* Date: $Date: 2006-01-17 17:42:13 +0100 (Tue, 17 Jan 2006) $
* Last modified by: $Author: aarranz $
*
* (C) Copyright 2005 Telefónica Investigación y Desarrollo
*     S.A.Unipersonal (Telefónica I+D)
*
* Info about members and contributors of the MORFEO project
* is available at:
*
*   http://www.morfeo-project.org/TIDNotifJ/CREDITS
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*
* If you want to use this software an plan to distribute a
* proprietary application in any way, and you are not licensing and
* distributing your source code under GPL, you probably need to
* purchase a commercial license of the product.  More info about
* licensing options is available at:
*
*   http://www.morfeo-project.org/TIDNotifJ/Licensing
*/ 

/* Generated By:JJTree: Do not edit this line. TIDAssocAnyValue.java */

package es.tid.util.parser;

public class TIDAssocAnyValue extends SimpleNode implements TIDConstraintMsg
{
  private static final String NODENAME = "AssocAny Member: name value == ";

  static private org.omg.DynamicAny.DynAnyFactory dynAnyFactory = null;

  private static final int name_index = 0;
  private static final int value_index = 1;

  private String sequence_member_value;
  private AnyValue anyvalue;

  public TIDAssocAnyValue(int id) 
  {
    super(id);
    super.node_type = NodeType.TIDAssocAnyValue;
    anyvalue = new AnyValue();
  }

  public TIDAssocAnyValue(ConstraintParser p, int id) 
  {
    super(p, id);
    super.node_type = NodeType.TIDAssocAnyValue;
    anyvalue = new AnyValue();
  }

  public void setMemberValue(String n) 
  {
    sequence_member_value = n;
    //sequence_member_value = n.substring(1,n.length()-1);
  }

  public String getMemberValue()
  {
    return this.sequence_member_value;
  }

  public String toString() 
  {
    return NODENAME + sequence_member_value;
  }

  private org.omg.DynamicAny.DynAny value( org.omg.DynamicAny.DynAny dynAny,
                                           String sequence_member_value )
  {
    try
    {
      dynAny.rewind();
    }
    catch (Exception e)
    {
      TIDParser.printStackTrace(TIDParser.ERROR, e);
      return null;
    }

    org.omg.CORBA.TypeCode type;
    try
    {
      type = dynAny.type();
    }
    catch (Exception e)
    {
      TIDParser.printStackTrace(TIDParser.ERROR, e);
      return null;
    }

    int tck_value;

    while( (tck_value = type.kind().value()) == org.omg.CORBA.TCKind._tk_alias)
    {
      try
      {
        type = type.content_type();
      }
      catch (Exception e)
      {
        TIDParser.printStackTrace(TIDParser.ERROR, e);
        return null;
      }
    }

    try
    {
      switch(tck_value)
      {
        case org.omg.CORBA.TCKind._tk_struct:
        case org.omg.CORBA.TCKind._tk_except:
        {
          org.omg.DynamicAny.DynStruct dynStruct =
                             org.omg.DynamicAny.DynStructHelper.narrow(dynAny);

          if ( !(dynStruct.seek(name_index)) )
          {
            TIDParser.print(TIDParser.DEBUG, TAAV_NAME_NOT_SEEK);
            return null;
          }
          org.omg.DynamicAny.DynAny dynElem = dynStruct.current_component();

          TypeValuePair result = anyvalue.evaluate(dynElem);

          if (result.type == TypeValuePair.ERRTYPE)
          {
            return null;
          }
          else if (result.type != TypeValuePair.STRTYPE)
          {
            return null;
          }
          else if ( sequence_member_value.compareTo( 
                                               (String)result.val.objVal) == 0)
          {
            if ( !(dynStruct.seek(value_index)) )
            {
              TIDParser.print(TIDParser.DEBUG, TAAV_VALUE_NOT_SEEK);
              return null;
            }
            org.omg.DynamicAny.DynAny dynValue = dynStruct.current_component();
            return dynValue;
          }
          return null;
        }
        //
        // NUEVO (por si la estructura estuviera dentro de un ANY)
        //
        case org.omg.CORBA.TCKind._tk_any:
        {
          try
          {
            if ( locateDynAnyFactory() < 0 )
            {
              return null;
            }
            return value(dynAnyFactory.create_dyn_any(dynAny.get_any()));
            //return value(dynAny.get_dyn_any());
          }
          catch (Exception e)
          {
            TIDParser.printStackTrace(TIDParser.ERROR, e);
          }
          return null;
        }
        default:
        {
          TIDParser.print(TIDParser.DEBUG, TAAV_UNKNOWN_VALUE);
        }
      }
    }
    catch (Exception e)
    {
      TIDParser.printStackTrace(TIDParser.ERROR, e);
    }
    return null;
  }

  public org.omg.DynamicAny.DynAny value(org.omg.DynamicAny.DynAny dynAny)
  {
    try
    {
      dynAny.rewind();
    }
    catch (Exception e)
    {
      TIDParser.printStackTrace(TIDParser.ERROR, e);
      return null;
    }
    
    org.omg.CORBA.TypeCode type;
    try
    {
      type = dynAny.type();
    }
    catch (Exception e)
    {
      TIDParser.printStackTrace(TIDParser.ERROR, e);
      return null;
    }

    int tck_value;

    while( (tck_value = type.kind().value()) == org.omg.CORBA.TCKind._tk_alias)
    {
      try 
      {
        type = type.content_type();
      }
      catch (Exception e)
      {
        TIDParser.printStackTrace(TIDParser.ERROR, e);
          return null;
      }
    }

    try 
    {
      switch(tck_value)
      {
        case org.omg.CORBA.TCKind._tk_sequence:
        {
          org.omg.DynamicAny.DynSequence dynSequence = 
                           org.omg.DynamicAny.DynSequenceHelper.narrow(dynAny);

          int length = dynSequence.get_length();

          // Recorro DynSequence buscando al miembro con name == "member_value"
          do
          {
            org.omg.DynamicAny.DynAny dynElem = dynSequence.current_component();
            org.omg.DynamicAny.DynAny dynValue =
                                         value(dynElem, sequence_member_value);
            if (dynValue != null)
            {
              return dynValue;
            }
          }
          while (dynSequence.next());
          return null;
        }
        default:
          TIDParser.print(TIDParser.DEBUG, TAAV_DEFAULT);
          return null;
      }
    }
    catch (Exception e)
    {
      TIDParser.printStackTrace(TIDParser.ERROR, e);
    }
    return null;
  }

  public TypeValuePair evaluate_value_in( TypeValuePair data_value, 
                                          org.omg.DynamicAny.DynAny dynAny )
  {
    try
    {
      dynAny.rewind();
    }
    catch (Exception e)
    {
      TIDParser.printStackTrace(TIDParser.ERROR, e);
      return new TypeValuePair();
    }
    
    org.omg.CORBA.TypeCode type;
    try
    {
      type = dynAny.type();
    }
    catch (Exception e)
    {
      TIDParser.printStackTrace(TIDParser.ERROR, e);
      return new TypeValuePair();
    }

    int tck_value;

    while( (tck_value = type.kind().value()) == org.omg.CORBA.TCKind._tk_alias)
    {
      try 
      {
        type = type.content_type();
      }
      catch (Exception e)
      {
        TIDParser.printStackTrace(TIDParser.ERROR, e);
        return new TypeValuePair();
      }
    }

    try 
    {
      switch(tck_value)
      {
        case org.omg.CORBA.TCKind._tk_sequence:
        {
          org.omg.DynamicAny.DynSequence dynSequence = 
                           org.omg.DynamicAny.DynSequenceHelper.narrow(dynAny);

          if (dynSequence.get_length() > 0)
          {
            // Recorro DynSequence buscando al miembro con type=="member_value"
            // y valor == data_value
            do
            {
              org.omg.DynamicAny.DynAny dynElem=dynSequence.current_component();
              org.omg.DynamicAny.DynAny dynValue =
                                         value(dynElem, sequence_member_value);
              if (dynValue != null)
              {
                TypeValuePair result = anyvalue.evaluate(dynValue);

                if (result.type == TypeValuePair.ERRTYPE)
                {
                  //TIDParser.print(TIDParser.DEBUG, 
                       //"TIDAssocAnyValue.evaluate:value_in(): result ERROR");
                  return result;
                }
                else if (result.type != TypeValuePair.STRTYPE)
                {
                  TIDParser.print(TIDParser.DEBUG, TAAV_VALUE_ERROR2);
                  return new TypeValuePair();
                }
                else if (((String)result.val.objVal).equals(
                                                (String)data_value.val.objVal))
                {
                  return new TypeValuePair(true);
                }
              }
            }
            while (dynSequence.next());
          }
          // No encontrado
          return new TypeValuePair(false);
        }
        default:
          TIDParser.print(TIDParser.DEBUG, TAAV_IN_DEFAULT);
          return new TypeValuePair();
      }
    }
    catch (Exception e)
    {
      TIDParser.printStackTrace(TIDParser.ERROR, e);
    }
    return new TypeValuePair();
  }

  public TypeValuePair evaluate( org.omg.DynamicAny.DynAny dynany )
  {
    org.omg.DynamicAny.DynAny chosen = value(dynany);

    if (chosen == null)
    {
      return new TypeValuePair();
    }

    try
    {
      if (children != null)
      {
        TypeValuePair result = null;

        for (int i = 0; i < children.length; ++i)
        {
          SimpleNode n = (SimpleNode)children[i];

          if (n != null)
          {
            if ( locateDynAnyFactory() < 0 )
            {
              return new TypeValuePair();
            }
            return n.evaluate(dynAnyFactory.create_dyn_any(chosen.get_any()));
            //return n.evaluate( chosen.get_dyn_any() );
          }
        }
        return new TypeValuePair();
      }

      if (anyvalue != null)
      {
        if ( locateDynAnyFactory() < 0 )
        {
          return new TypeValuePair();
        }
       return anyvalue.evaluate(dynAnyFactory.create_dyn_any(chosen.get_any()));
        //return anyvalue.evaluate(chosen.get_dyn_any());
      }
    }
    catch (Exception e)
    {
      TIDParser.printStackTrace(TIDParser.ERROR, e);
    }
    return new TypeValuePair();
  }

  public TypeValuePair evaluate_in( TypeValuePair data_value, 
                                    org.omg.DynamicAny.DynAny dynany )
  {
    try
    {
      if (data_value.type != TypeValuePair.STRTYPE)
      {
        TIDParser.print(TIDParser.ERROR, TAAV_VALUE_ERROR);
        return new TypeValuePair();
      }

      if (children != null)
      {
        TypeValuePair result = null;

        for (int i = 0; i < children.length; ++i)
        {
          SimpleNode n = (SimpleNode)children[i];

          if (n != null)
          {
            return n.evaluate_in(data_value, dynany );
          }
        }
        return new TypeValuePair();
      }

      if (anyvalue != null)
      {
        return evaluate_value_in(data_value, dynany);
      }
    }
    catch (Exception e)
    {
      TIDParser.printStackTrace(TIDParser.ERROR, e);
    }
    return new TypeValuePair();
  }

  synchronized
  private int locateDynAnyFactory()
  {
    if (dynAnyFactory == null)
    {
      java.util.Properties props = new java.util.Properties();
      props.put("org.omg.CORBA.ORBClass","es.tid.TIDorbj.core.TIDORB");
      try
      {
        System.getProperties().put(
         "org.omg.CORBA.ORBSingletonClass","es.tid.TIDorbj.core.SingletonORB");
      }
      catch (Exception e)
      {
        // Capturada para evitar ecepciones de seguridad en los applets
        // Se supone que el applet ya tiene esta propiedad configurada.
      }
      org.omg.CORBA.ORB orb;

      try
      {
        String[] args = new String[0];
        orb = org.omg.CORBA.ORB.init(args, props);
      }
      catch (Exception e)
      {
        TIDParser.printStackTrace(TIDParser.ERROR, e);
        return -1;
      }

      try
      {
        org.omg.CORBA.Object obj =
                               orb.resolve_initial_references("DynAnyFactory");
        dynAnyFactory = org.omg.DynamicAny.DynAnyFactoryHelper.narrow(obj);
      }
      catch (Exception e)
      {
        TIDParser.printStackTrace(TIDParser.ERROR, e);
        return -1;
      }
    }
    return 0;
  }
}
