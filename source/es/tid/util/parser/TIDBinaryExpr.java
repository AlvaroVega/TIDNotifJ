/*
* MORFEO Project
* http://www.morfeo-project.org
*
* Component: TIDNotifJ
* Programming Language: Java
*
* File: $Source$
* Version: $Revision: 3 $
* Date: $Date: 2006-01-17 17:42:13 +0100 (Tue, 17 Jan 2006) $
* Last modified by: $Author: aarranz $
*
* (C) Copyright 2005 Telefónica Investigación y Desarrollo
*     S.A.Unipersonal (Telefónica I+D)
*
* Info about members and contributors of the MORFEO project
* is available at:
*
*   http://www.morfeo-project.org/TIDNotifJ/CREDITS
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*
* If you want to use this software an plan to distribute a
* proprietary application in any way, and you are not licensing and
* distributing your source code under GPL, you probably need to
* purchase a commercial license of the product.  More info about
* licensing options is available at:
*
*   http://www.morfeo-project.org/TIDNotifJ/Licensing
*/ 

/* Generated By:JJTree: Do not edit this line. TIDBinaryExpr.java */

package es.tid.util.parser;


import es.tid.util.parser.Operations.TIDBinaryOperations;

public class TIDBinaryExpr extends SimpleNode implements TIDBinaryOperations, TIDConstraintMsg
{
  private static final String NODENAME = "BinaryExpr: ";

  private String name;
  private int operator;

  public TIDBinaryExpr(int id) {
    super(id);
    super.node_type = NodeType.TIDBinaryExpr;
  }

  public TIDBinaryExpr(ConstraintParser p, int id) {
    super(p, id);
    super.node_type = NodeType.TIDBinaryExpr;
  }

  public void setOp(int n) 
  {
    try
    {
      operator = n;
      name = STR_OP[n-FIRST_OP];
    }
    catch (Exception e)
    {
      operator = UNKNOWN_OP;
      name = STR_OP[UNKNOWN_OP-FIRST_OP];
    }
  }

  public int getOp()
  {
    return this.operator;
  }

  public String toString() {
    return NODENAME + name;
  }

  public TypeValuePair evaluate( org.omg.DynamicAny.DynAny dynany )
  {

    if (children != null) 
    {
      TypeValuePair result = null;

      int num_data = 0;
      TypeValuePair data_result = null;

      switch (operator)
      {
        case OR_OP:
          for (int i = 0; i < children.length; ++i) 
          {
            SimpleNode n = (SimpleNode)children[i];

            if (n != null) 
            {
              result = n.evaluate( dynany );
              switch (result.type)
              {
                case TypeValuePair.BOOLTYPE:
                  if ( ((Boolean)result.val.objVal).booleanValue() == true )
                  {
                    return result;
                  }
                  break;
                case TypeValuePair.ITYPE:
                  if ( ((Integer)result.val.objVal).intValue() != 0 )
                  {
                    result = null;
                    return new TypeValuePair(true);
                  }
                  break;
                case TypeValuePair.FTYPE:
                  if ( ((Float)result.val.objVal).floatValue() != 0.0 )
                  {
                    result = null;
                    return new TypeValuePair(true);
                  }
                  break;
                case TypeValuePair.STRTYPE:
                  if (num_data > 0)
                  {
                    result = null;
                    return new TypeValuePair();
                  }
                  num_data++;
                  data_result = result;
                  break;
                default:
                  result = null;
                  return new TypeValuePair();
              }
            }
          }
          if (num_data > 0)
          {
            return data_result;
          }
          return new TypeValuePair(false);
        case AND_OP:
          for (int i = 0; i < children.length; ++i) 
          {
            SimpleNode n = (SimpleNode)children[i];

            if (n != null) 
            {
              result = n.evaluate( dynany );
              switch (result.type)
              {
                case TypeValuePair.BOOLTYPE:
                  if ( ((Boolean)result.val.objVal).booleanValue() == false )
                  {
                    return result;
                  }
                  break;
                case TypeValuePair.ITYPE:
                  if ( ((Integer)result.val.objVal).intValue() == 0 )
                  {
                    result = null;
                    return new TypeValuePair(false);
                  }
                  break;
                case TypeValuePair.FTYPE:
                  if ( ((Float)result.val.objVal).floatValue() == 0.0 )
                  {
                    result = null;
                    return new TypeValuePair(false);
                  }
                case TypeValuePair.STRTYPE:
                  if (num_data > 0)
                  {
                    result = null;
                    return new TypeValuePair();
                  }
                  num_data++;
                  data_result = result;
                  break;
                default:
                  result = null;
                  return new TypeValuePair();
              }
            }
          }
          if (num_data > 0)
          {
            return data_result;
          }
          return new TypeValuePair(true);
        case SUBSTRING_OP:
        case BEGINSTRING_OP:
          {
          int j = 0;

          TypeValuePair operand[] = new TypeValuePair[2];

          for (int i = 0; i < children.length; ++i)
          {
            SimpleNode n = (SimpleNode)children[i];

            if (n != null)
            {
              operand[j++] = n.evaluate( dynany );
            }
          }

          if (j == 2) // Todo OK
          {
            if ( (operand[0].type != TypeValuePair.STRTYPE) ||
                 (operand[1].type != TypeValuePair.STRTYPE) )
            {
              operand[0] = null;
              operand[1] = null;
              return new TypeValuePair();
            }

            if (operator == SUBSTRING_OP)
            {
              result = new TypeValuePair( (((String)operand[1].val.objVal)
                              .indexOf((String)operand[0].val.objVal) != -1) );
            }
            else 
            {
              result = new TypeValuePair( ((String)operand[1].val.objVal)
                                  .startsWith((String)operand[0].val.objVal) );
            }
            operand[0] = null;
            operand[1] = null;
            return result;
          }
          else // Num. hijos incorrecto
          {
            operand[0] = null;
            operand[1] = null;
            TIDParser.print(TIDParser.ERROR, TBE_NUM_OPERANDS);
          }
          }
          break;
      }
    }
    return new TypeValuePair();
  }

}
