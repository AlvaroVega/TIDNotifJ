/*
* MORFEO Project
* http://www.morfeo-project.org
*
* Component: TIDNotifJ
* Programming Language: Java
*
* File: $Source$
* Version: $Revision: 3 $
* Date: $Date: 2006-01-17 17:42:13 +0100 (Tue, 17 Jan 2006) $
* Last modified by: $Author: aarranz $
*
* (C) Copyright 2005 Telefónica Investigación y Desarrollo
*     S.A.Unipersonal (Telefónica I+D)
*
* Info about members and contributors of the MORFEO project
* is available at:
*
*   http://www.morfeo-project.org/TIDNotifJ/CREDITS
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*
* If you want to use this software an plan to distribute a
* proprietary application in any way, and you are not licensing and
* distributing your source code under GPL, you probably need to
* purchase a commercial license of the product.  More info about
* licensing options is available at:
*
*   http://www.morfeo-project.org/TIDNotifJ/Licensing
*/ 

/* Generated By:JJTree&JavaCC: Do not edit this line. ConstraintParserTokenManager.java */
package es.tid.util.parser;

public class ConstraintParserTokenManager implements ConstraintParserConstants
{
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x73f7eec10000000L) != 0L)
         {
            jjmatchedKind = 76;
            return 9;
         }
         if ((active0 & 0x20000000L) != 0L)
            return 65;
         if ((active0 & 0x200000000L) != 0L)
            return 11;
         if ((active0 & 0x4000L) != 0L)
            return 3;
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 76;
            return 43;
         }
         return -1;
      case 1:
         if ((active0 & 0x73f5ee010000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 1;
            }
            return 9;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 1;
            }
            return 42;
         }
         if ((active0 & 0x200c00000000L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 2;
            return 13;
         }
         if ((active0 & 0x73f7e8010000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 2;
            return 9;
         }
         if ((active0 & 0x6000000000L) != 0L)
            return 9;
         return -1;
      case 3:
         if ((active0 & 0x73f7e0000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
            return 9;
         }
         if ((active0 & 0x10000000000L) != 0L)
            return 81;
         if ((active0 & 0x8010000000L) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0x73f400000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
            return 9;
         }
         if ((active0 & 0x3e0000000000L) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active0 & 0x73e000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
            return 9;
         }
         if ((active0 & 0x1400000000000L) != 0L)
            return 9;
         return -1;
      case 6:
         if ((active0 & 0x700000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 6;
            return 9;
         }
         if ((active0 & 0x3e000000000000L) != 0L)
            return 9;
         return -1;
      case 7:
         if ((active0 & 0x700000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 7;
            return 9;
         }
         return -1;
      case 8:
         if ((active0 & 0x600000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 8;
            return 9;
         }
         if ((active0 & 0x100000000000000L) != 0L)
            return 9;
         return -1;
      case 9:
         if ((active0 & 0x600000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 9;
            return 9;
         }
         return -1;
      case 10:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 10;
            return 9;
         }
         if ((active0 & 0x200000000000000L) != 0L)
            return 9;
         return -1;
      case 11:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 11;
            return 9;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 80);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 34:
         return jjStopAtPos(0, 30);
      case 36:
         return jjStopAtPos(0, 31);
      case 37:
         return jjStopAtPos(0, 19);
      case 39:
         return jjStartNfaWithStates_0(0, 29, 65);
      case 40:
         return jjStopAtPos(0, 7);
      case 41:
         return jjStopAtPos(0, 8);
      case 42:
         return jjStopAtPos(0, 17);
      case 43:
         return jjStopAtPos(0, 15);
      case 44:
         return jjStopAtPos(0, 13);
      case 45:
         return jjStopAtPos(0, 16);
      case 46:
         return jjStartNfaWithStates_0(0, 14, 3);
      case 47:
         return jjStopAtPos(0, 18);
      case 58:
         return jjStopAtPos(0, 12);
      case 59:
         return jjStopAtPos(0, 11);
      case 60:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x6000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 62:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 91:
         return jjStopAtPos(0, 9);
      case 92:
         return jjStartNfaWithStates_0(0, 33, 11);
      case 93:
         return jjStopAtPos(0, 10);
      case 95:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0xc0801000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x422000000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200400000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400010000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x18040000000000L);
      case 126:
         return jjStopAtPos(0, 20);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x4020000000000L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x18040000000000L);
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x220400000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000010000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x202000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1104000000000L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x18040000000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L);
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80800000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400200000000000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 81);
         break;
      case 69:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200040000000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x10900000000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100080000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 9);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000000000L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 9);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 9);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x100400000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 9);
         break;
      case 104:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x16000000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x280000000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L);
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 9);
         break;
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 9);
         break;
      case 104:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(6, 47);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x140000000000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L);
      case 112:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 9);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 9);
         break;
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(7, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x480000000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(8, 55);
         break;
      case 103:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 56, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 57, 9);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = ASCII_CharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 58, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 81;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 65:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(66);
                  else if (curChar == 39)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0xffffff7bffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 43:
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(9);
                  break;
               case 81:
               case 14:
                  if ((0xc00000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(9);
                  }
                  else if (curChar == 58)
                     jjCheckNAddStates(7, 9);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 16);
                  else if (curChar == 39)
                     jjCheckNAddStates(17, 21);
                  else if (curChar == 46)
                     jjCheckNAdd(3);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddTwoStates(61, 63);
                  }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(9);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(22, 24);
                  break;
               case 5:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 29);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 34);
                  break;
               case 20:
                  if (curChar == 58)
                     jjAddStates(35, 36);
                  break;
               case 21:
                  if (curChar == 46)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddStates(37, 39);
                  break;
               case 24:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 46);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar != 46)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddStates(47, 49);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddStates(47, 49);
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(33, 26);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(37, 26);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 26);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 16);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if (curChar != 46)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(53, 55);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(53, 55);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(51, 7);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(55, 7);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 58:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 7);
                  break;
               case 60:
                  if (curChar != 48)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(61, 63);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 63:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(63);
                  break;
               case 64:
                  if (curChar == 39)
                     jjCheckNAddStates(17, 21);
                  break;
               case 66:
                  if (curChar == 39 && kind > 61)
                     kind = 61;
                  break;
               case 68:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 69:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(70, 66);
                  break;
               case 70:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 71:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 73:
                  if ((0xffffff7bffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 75:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 76:
                  if (curChar == 39 && kind > 62)
                     kind = 62;
                  break;
               case 77:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(59, 62);
                  break;
               case 78:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 79:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 65:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 92)
                     jjAddStates(63, 65);
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(66);
                  else if (curChar == 92)
                     jjAddStates(66, 68);
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(9);
                  }
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 81:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(30, 34);
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 13:
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(9);
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(9);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(9);
                  }
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 4:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(69, 70);
                  break;
               case 7:
                  if ((0x5000000050L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 8:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(12);
                  break;
               case 15:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(25, 29);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(25, 29);
                  break;
               case 18:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(30, 34);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(30, 34);
                  break;
               case 23:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(71, 72);
                  break;
               case 26:
                  if ((0x5000000050L & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(75, 76);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 44:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(79, 80);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 57:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 61:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(62);
                  break;
               case 67:
                  if (curChar == 92)
                     jjAddStates(66, 68);
                  break;
               case 68:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 73:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 74:
                  if (curChar == 92)
                     jjAddStates(63, 65);
                  break;
               case 75:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 65:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 73:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 81 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = ASCII_CharStream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   73, 74, 76, 14, 15, 18, 20, 14, 15, 18, 46, 47, 52, 53, 56, 57, 
   7, 65, 67, 73, 74, 76, 3, 4, 7, 14, 15, 17, 18, 20, 14, 15, 
   18, 19, 20, 21, 27, 22, 23, 26, 28, 29, 34, 35, 38, 39, 26, 30, 
   31, 26, 38, 39, 26, 48, 49, 7, 56, 57, 7, 73, 74, 78, 76, 75, 
   77, 79, 68, 69, 71, 5, 6, 24, 25, 32, 33, 36, 37, 40, 41, 50, 
   51, 54, 55, 58, 59, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\50", "\51", "\133", "\135", "\73", 
"\72", "\54", "\56", "\53", "\55", "\52", "\57", "\45", "\176", "\74", "\76", 
"\75\75", "\41\75", "\74\76", "\74\75", "\76\75", "\154\151\153\145", "\47", "\42", 
"\44", "\137", "\134", "\151\156", "\157\162", "\137\144", "\141\156\144", 
"\156\157\164", "\124\122\125\105", "\111\104\114\72", "\106\101\114\123\105", 
"\164\143\137\151\144", "\145\170\151\163\164", "\143\157\165\156\164", "\151\156\163\164\162", 
"\154\145\156\147\164\150", "\137\154\145\156\147\164\150", "\155\157\144\165\154\145", 
"\144\141\164\145\143\155\160", "\104\101\124\105\143\155\160", "\164\143\137\153\151\156\144", 
"\164\143\137\156\141\155\145", "\144\145\146\141\165\154\164", "\137\164\171\160\145\137\151\144", 
"\137\162\145\160\157\163\137\151\144", "\163\165\142\163\164\162\151\156\147", 
"\142\145\147\151\156\163\164\162\151\156\147", "\144\151\163\143\162\151\155\151\156\141\164\157\162", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\12", null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7fffffffffffff81L, 0x31000L, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static private ASCII_CharStream input_stream;
static private final int[] jjrounds = new int[81];
static private final int[] jjstateSet = new int[162];
static protected char curChar;
public ConstraintParserTokenManager(ASCII_CharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public ConstraintParserTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 81; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? ASCII_CharStream.GetImage() : im;
   t.beginLine = ASCII_CharStream.getBeginLine();
   t.beginColumn = ASCII_CharStream.getBeginColumn();
   t.endLine = ASCII_CharStream.getEndLine();
   t.endColumn = ASCII_CharStream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = ASCII_CharStream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { ASCII_CharStream.backup(0);
      while ((curChar < 64 && (0x100003200L & (1L << curChar)) != 0L) || 
             (curChar >> 6) == 1 && (0x2800000000000000L & (1L << (curChar & 077))) != 0L)
         curChar = ASCII_CharStream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         ASCII_CharStream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = ASCII_CharStream.getEndLine();
   int error_column = ASCII_CharStream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { ASCII_CharStream.readChar(); ASCII_CharStream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : ASCII_CharStream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      ASCII_CharStream.backup(1);
      error_after = curPos <= 1 ? "" : ASCII_CharStream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
